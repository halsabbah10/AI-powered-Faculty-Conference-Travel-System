name: FTCS CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: con_system_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Initialize test database
        run: |
          mysql -h 127.0.0.1 -u root -proot con_system_test < con_system.sql

      - name: Run tests
        run: |
          pytest --cov=app tests/
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: con_system_test
          TEST_DB_HOST: 127.0.0.1
          TEST_DB_USER: root
          TEST_DB_PASSWORD: root
          TEST_DB_NAME: con_system_test

      - name: Generate coverage report
        run: |
          pytest --cov=app --cov-report=xml tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Lint with flake8
        run: |
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: |
          black --check app tests

      - name: Check imports with isort
        run: |
          isort --check-only --profile black app tests

  e2e-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install playwright pytest-playwright

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium

      - name: Set up MySQL
        run: |
          docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=con_system_test mysql:8.0
          # Wait for MySQL to start
          sleep 20
          # Initialize database
          docker exec mysql sh -c 'mysql -uroot -proot con_system_test < /con_system.sql'

      - name: Start test application
        run: |
          # Start the application in the background
          streamlit run app/main.py &
          # Wait for app to start
          sleep 10
        env:
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: con_system_test
          PORT: 8501
          TESTING: true

      - name: Run E2E tests
        run: |
          pytest e2e_tests/test_workflows.py -v
        env:
          TEST_APP_URL: http://localhost:8501
          PLAYWRIGHT_BROWSERS_PATH: /ms-playwright

  build:
    needs: [test, lint, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: yourusername/ftcs:latest,yourusername/ftcs:${{ github.sha }}

  deploy-staging:
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here or use a service like AWS ECS, Kubernetes, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test script here

      - name: Notify deployment status
        run: |
          echo "Notifying team of deployment status..."
          # Add notification script here
